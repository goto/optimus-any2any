// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"
	iter "iter"

	mock "github.com/stretchr/testify/mock"

	orderedmapjson "github.com/GitRowin/orderedmapjson"

	slog "log/slog"
)

// Source is an autogenerated mock type for the Source type
type Source struct {
	mock.Mock
}

// AddCleanFunc provides a mock function with given fields: f
func (_m *Source) AddCleanFunc(f func() error) {
	_m.Called(f)
}

// Close provides a mock function with no fields
func (_m *Source) Close() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Component provides a mock function with no fields
func (_m *Source) Component() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Component")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// ConcurrentTasks provides a mock function with given fields: _a0, _a1, _a2
func (_m *Source) ConcurrentTasks(_a0 context.Context, _a1 int, _a2 []func() error) error {
	ret := _m.Called(_a0, _a1, _a2)

	if len(ret) == 0 {
		panic("no return value specified for ConcurrentTasks")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int, []func() error) error); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Context provides a mock function with no fields
func (_m *Source) Context() context.Context {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Context")
	}

	var r0 context.Context
	if rf, ok := ret.Get(0).(func() context.Context); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(context.Context)
		}
	}

	return r0
}

// Err provides a mock function with no fields
func (_m *Source) Err() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Err")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Logger provides a mock function with no fields
func (_m *Source) Logger() *slog.Logger {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Logger")
	}

	var r0 *slog.Logger
	if rf, ok := ret.Get(0).(func() *slog.Logger); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*slog.Logger)
		}
	}

	return r0
}

// Name provides a mock function with no fields
func (_m *Source) Name() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Name")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Out provides a mock function with no fields
func (_m *Source) Out() iter.Seq[[]byte] {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Out")
	}

	var r0 iter.Seq[[]byte]
	if rf, ok := ret.Get(0).(func() iter.Seq[[]byte]); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(iter.Seq[[]byte])
		}
	}

	return r0
}

// RecordWithMetadata provides a mock function with given fields: record
func (_m *Source) RecordWithMetadata(record *orderedmapjson.AnyOrderedMap) *orderedmapjson.AnyOrderedMap {
	ret := _m.Called(record)

	if len(ret) == 0 {
		panic("no return value specified for RecordWithMetadata")
	}

	var r0 *orderedmapjson.AnyOrderedMap
	if rf, ok := ret.Get(0).(func(*orderedmapjson.AnyOrderedMap) *orderedmapjson.AnyOrderedMap); ok {
		r0 = rf(record)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*orderedmapjson.AnyOrderedMap)
		}
	}

	return r0
}

// RecordWithoutMetadata provides a mock function with given fields: record
func (_m *Source) RecordWithoutMetadata(record *orderedmapjson.AnyOrderedMap) *orderedmapjson.AnyOrderedMap {
	ret := _m.Called(record)

	if len(ret) == 0 {
		panic("no return value specified for RecordWithoutMetadata")
	}

	var r0 *orderedmapjson.AnyOrderedMap
	if rf, ok := ret.Get(0).(func(*orderedmapjson.AnyOrderedMap) *orderedmapjson.AnyOrderedMap); ok {
		r0 = rf(record)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*orderedmapjson.AnyOrderedMap)
		}
	}

	return r0
}

// RegisterProcess provides a mock function with given fields: f
func (_m *Source) RegisterProcess(f func() error) {
	_m.Called(f)
}

// Retry provides a mock function with given fields: _a0
func (_m *Source) Retry(_a0 func() error) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Retry")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(func() error) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Send provides a mock function with given fields: v
func (_m *Source) Send(v []byte) {
	_m.Called(v)
}

// SendRecord provides a mock function with given fields: _a0
func (_m *Source) SendRecord(_a0 *orderedmapjson.AnyOrderedMap) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for SendRecord")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*orderedmapjson.AnyOrderedMap) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetBackend provides a mock function with given fields: backend
func (_m *Source) SetBackend(backend string) {
	_m.Called(backend)
}

// SetBufferSize provides a mock function with given fields: size
func (_m *Source) SetBufferSize(size int) {
	_m.Called(size)
}

// SetLogger provides a mock function with given fields: l
func (_m *Source) SetLogger(l *slog.Logger) {
	_m.Called(l)
}

// NewSource creates a new instance of Source. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSource(t interface {
	mock.TestingT
	Cleanup(func())
}) *Source {
	mock := &Source{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
