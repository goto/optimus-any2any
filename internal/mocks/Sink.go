// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// Sink is an autogenerated mock type for the Sink type
type Sink struct {
	mock.Mock
}

// Close provides a mock function with no fields
func (_m *Sink) Close() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CloseInlet provides a mock function with no fields
func (_m *Sink) CloseInlet() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for CloseInlet")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Err provides a mock function with no fields
func (_m *Sink) Err() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Err")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// In provides a mock function with given fields: _a0
func (_m *Sink) In(_a0 []byte) {
	_m.Called(_a0)
}

// Wait provides a mock function with no fields
func (_m *Sink) Wait() {
	_m.Called()
}

// NewSink creates a new instance of Sink. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSink(t interface {
	mock.TestingT
	Cleanup(func())
}) *Sink {
	mock := &Sink{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
